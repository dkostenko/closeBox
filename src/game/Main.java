/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import controllers.LevelsController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;

/**
 *
 * @author macbook
 */
public class Main extends javax.swing.JFrame implements Runnable {

    private LevelsController levelsController;
    public static State state;
    private Thread thread;
    
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        levelsController = new LevelsController();
        
        this.setLayout(new BorderLayout());
        this.add(this.levelsController.getLevelView(), BorderLayout.WEST);
        this.buttonsPanel.setVisible(false);
    }
    
    
    private void start(Controller controller){
        Settings.setAVAILABLE_CONTROL(controller);
        
        if(controller == Controller.PANEL_BUTTONS){
            this.goToBottom.setEnabled(true);
            this.goToLeft.setEnabled(true);
            this.goToRight.setEnabled(true);
            this.goToTop.setEnabled(true);
        } else {
            this.goToBottom.setEnabled(false);
            this.goToLeft.setEnabled(false);
            this.goToRight.setEnabled(false);
            this.goToTop.setEnabled(false);
        }
        
        state = State.GAMING;
        
        buttonsPanel.setVisible(true);
        startDialog.setVisible(false);
        thread.start();
    }
    
    
    private void prepare(){
        state = State.PREPARING;
        this.repaint();
        levelsController.restart();
        startDialog.setVisible(true);
        buttonsPanel.setVisible(false);
        this.thread = new Thread(this);
    }

    
    private void finish(){
        this.repaint();
        
        try {
            Thread.sleep(Settings.getTIME_BETWEEN_LEVELS());
        } catch (Exception e) {
            System.exit(0);
        }
        
        thread.interrupt();
        prepare();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startDialog = new javax.swing.JPanel();
        keyBoard = new javax.swing.JButton();
        mouse = new javax.swing.JButton();
        panelButtons = new javax.swing.JButton();
        buttonsPanel = new javax.swing.JPanel();
        goToLeft = new javax.swing.JButton();
        goToTop = new javax.swing.JButton();
        goToBottom = new javax.swing.JButton();
        goToRight = new javax.swing.JButton();
        timeLeft = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(200, 200));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("CloseBox"); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        keyBoard.setText("Клавиатура");
        keyBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyBoardActionPerformed(evt);
            }
        });

        mouse.setText("Мышь");
        mouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mouseActionPerformed(evt);
            }
        });

        panelButtons.setText("Кнопки на панеле");
        panelButtons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panelButtonsActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout startDialogLayout = new org.jdesktop.layout.GroupLayout(startDialog);
        startDialog.setLayout(startDialogLayout);
        startDialogLayout.setHorizontalGroup(
            startDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, startDialogLayout.createSequentialGroup()
                .addContainerGap(352, Short.MAX_VALUE)
                .add(startDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(keyBoard, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(mouse, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(panelButtons))
                .add(138, 138, 138))
        );
        startDialogLayout.setVerticalGroup(
            startDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, startDialogLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(keyBoard)
                .add(18, 18, 18)
                .add(mouse)
                .add(18, 18, 18)
                .add(panelButtons)
                .add(237, 237, 237))
        );

        goToLeft.setText("◄");
        goToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToLeftActionPerformed(evt);
            }
        });

        goToTop.setText("▲");
        goToTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToTopActionPerformed(evt);
            }
        });

        goToBottom.setText("▼");
        goToBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToBottomActionPerformed(evt);
            }
        });

        goToRight.setText("►");
        goToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToRightActionPerformed(evt);
            }
        });

        timeLeft.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLeft.setText("Осталось: ");

        org.jdesktop.layout.GroupLayout buttonsPanelLayout = new org.jdesktop.layout.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(goToLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(buttonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(buttonsPanelLayout.createSequentialGroup()
                        .add(goToTop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(67, 67, 67))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, buttonsPanelLayout.createSequentialGroup()
                        .add(goToBottom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(goToRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18))))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(timeLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(buttonsPanelLayout.createSequentialGroup()
                .add(46, 46, 46)
                .add(timeLeft)
                .add(18, 18, 18)
                .add(goToTop)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(buttonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(goToRight, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(goToLeft)
                    .add(goToBottom, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(31, 31, 31))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(startDialog, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(buttonsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, startDialog, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(buttonsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(199, 199, 199))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goToTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToTopActionPerformed
        if(Settings.getAVAILABLE_CONTROL() == Controller.PANEL_BUTTONS && state == State.GAMING){
            levelsController.moveBlock(Direction.TOP);
        }
    }//GEN-LAST:event_goToTopActionPerformed

    private void goToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToLeftActionPerformed
        if(Settings.getAVAILABLE_CONTROL() == Controller.PANEL_BUTTONS && state == State.GAMING){
            levelsController.moveBlock(Direction.LEFT);
        }
    }//GEN-LAST:event_goToLeftActionPerformed

    private void goToBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToBottomActionPerformed
        if(Settings.getAVAILABLE_CONTROL() == Controller.PANEL_BUTTONS && state == State.GAMING){
            levelsController.moveBlock(Direction.BOTTOM);
        }
    }//GEN-LAST:event_goToBottomActionPerformed

    private void goToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToRightActionPerformed
        if(Settings.getAVAILABLE_CONTROL() == Controller.PANEL_BUTTONS && state == State.GAMING){
            levelsController.moveBlock(Direction.RIGHT);
        }
    }//GEN-LAST:event_goToRightActionPerformed

    private void keyBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyBoardActionPerformed
        start(Controller.KEYBOARD);
    }//GEN-LAST:event_keyBoardActionPerformed

    private void mouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mouseActionPerformed
        start(Controller.MOUSE_ON_FIELD);
    }//GEN-LAST:event_mouseActionPerformed

    private void panelButtonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panelButtonsActionPerformed
        start(Controller.PANEL_BUTTONS);
    }//GEN-LAST:event_panelButtonsActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(Settings.getAVAILABLE_CONTROL() == Controller.KEYBOARD && state == State.GAMING){
            switch(evt.getKeyCode()){
                case KeyEvent.VK_UP:
                    this.levelsController.moveBlock(Direction.TOP);
                    break;
                case KeyEvent.VK_RIGHT:
                    this.levelsController.moveBlock(Direction.RIGHT);
                    break;
                case KeyEvent.VK_DOWN:
                    this.levelsController.moveBlock(Direction.BOTTOM);
                    break;
                case KeyEvent.VK_LEFT:
                    this.levelsController.moveBlock(Direction.LEFT);
                    break;
            }
        }
        System.out.println("Кнопка на клавиатуре нажата");
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Main game = new Main();
        game.setVisible(true);
        game.prepare();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton goToBottom;
    private javax.swing.JButton goToLeft;
    private javax.swing.JButton goToRight;
    private javax.swing.JButton goToTop;
    private javax.swing.JButton keyBoard;
    private javax.swing.JButton mouse;
    private javax.swing.JButton panelButtons;
    private javax.swing.JPanel startDialog;
    private javax.swing.JLabel timeLeft;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        int frames = Settings.getFRAMES_PER_SECOND();
        
        while(state == State.GAMING){
            
            if(frames >= Settings.getFRAMES_PER_SECOND()){
                frames = 0;
                timeLeft.setText(levelsController.updateTime());
                levelsController.tryToFinishLevel();
            }
            
            levelsController.draw();
            
            try {
                frames++;
                Thread.sleep(Settings.getSKIP_TICKS());
            } catch (Exception e) {
                System.exit(0);
            }
        }
        
        finish();
    }

    @Override
    public void paint(Graphics g) {
        Graphics2D g2d = (Graphics2D)g;
        super.paint(g2d);

        if(state == State.GAME_IS_WON){
            g2d.setFont(new Font("Arial", Font.BOLD, 50));
            g2d.setColor(Color.RED);
            g2d.drawString("ВЫ ВЫИГРАЛИ!", getWidth() / 2 - 210, getHeight() / 2);
            return;
        }
        
        if(state == State.GAME_IS_LOST){
            g2d.setFont(new Font("Arial", Font.BOLD, 50));
            g2d.setColor(Color.RED);
            g2d.drawString("ВЫ ПРОИГРАЛИ", getWidth() / 2 - 210, getHeight() / 2);
        }
    }   
}
